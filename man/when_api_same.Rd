% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search.R
\name{when_api_same}
\alias{when_api_same}
\alias{when_fn_exists}
\title{Compare function existence and APIs across package versions}
\usage{
when_api_same(fn, package, current_fn = NULL, search = c("binary",
  "forward", "backward", "all", "parallel"), report = c("full", "brief"),
  quiet = TRUE, ...)

when_fn_exists(fn, package, search = c("binary", "forward", "backward", "all",
  "parallel"), report = c("full", "brief"), quiet = TRUE, ...)
}
\arguments{
\item{fn}{Function name as a character string.}

\item{package}{Package. Alternatively, specify the function name as e.g. \code{"package::function"}.}

\item{current_fn}{Current function for comparison. By default, \code{fn} in the current version of
the package (which is assumed to be available in a standard library location). If provided, this
must be an actual function, not a character string. You can use
\code{\link{get_fn_at}} for this.}

\item{search}{"binary", "forward", "backward", "all" or "parallel". See Details.}

\item{report}{"brief" or "full". See Value.}

\item{quiet}{Logical. Hide output from \code{install.packages}?}

\item{...}{Arguments passed to \code{\link[versions]{install.versions}} or
\code{\link[devtools]{install_version}}, and thence to \code{\link{install.packages}}.}
}
\value{
If \code{report} is "brief", the earliest "known good" version.
Otherwise, a data frame of versions with a full results column.
}
\description{
\code{when_api_same} reports package versions where the API of a function was the same as now (or
the same as \code{current_fn}).

\code{when_fn_exists} reports the first package version where a function exists.
}
\details{
"forward" ("backward") searches incrementally
from the earliest (latest) version; "binary" does a binary search from the midpoint. These search
strategies assume that API changes happen just once - i.e. once a function exists or API is the same as now,
it will stay so in future versions. "all" searches every version and makes no assumptions. "parallel" searches
every version in parallel using \code{\link[parallel]{parLapply}}.
}
\section{Speed}{

This function may download and install multiple versions from MRAN, so it is likely to be slow
when first used (and even afterwards if library loading is slow). Using \code{search = "parallel"}
may help, but not if the network is the bottleneck.
}

\examples{
\dontrun{
when_api_same("read.dta", "foreign")
}
\dontrun{
when_fn_exists('read.dta', 'foreign')
}
}
